<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ambitus | Climate Markets</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #2e8b57;
            --secondary: #2196F3;
            --accent: #4CAF50;
            --dark: #1B5E20;
            --light: #E8F5E9;
            --success: #4CAF50;
            --danger: #F44336;
            --card-bg: rgba(255, 255, 255, 0.9);
            --gradient: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
        }


        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            background: var(--gradient);
            color: white;
            line-height: 1.6;
            min-height: 100vh;
        }

        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 2rem;
            background: rgba(50, 50, 50, 0.1);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .logo {
            font-weight: 700;
            font-size: 1.8rem;
            color: white;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            font-weight: 500;
            padding: 0.5rem 0;
            border-bottom: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .nav-links a:hover {
            border-bottom-color: white;
        }

        .logo a {
            color: white;        /* Set text color to white */
            font-weight: bold;   /* Make the link bold */
            text-decoration: none; /* Remove underline */
        }

        .logo a:hover,
        .logo a:focus,
        .logo a:active {
            color: white;        /* Keep the color white even on hover/focus/active */
            text-decoration: none; /* Keep the no underline even on hover/focus/active */
        }

        .user-actions {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1.5rem;
            display: grid;
            gap: 2rem;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }

        .market-card {
            backdrop-filter: blur(25px);
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            position: relative; /* Required for positioning the circle */
            overflow: visible; /* Ensures the circle isn't clipped */
        }

        .market-card::after {
             content: "";
             position: absolute;
             top: 12px;
             right: 12px;
             width: 16px;
             height: 16px;
             background: rgba(46, 139, 87, 0.3); /* Match your primary color */
             border-radius: 50%;
             opacity: 0.3;
             z-index: 2;
        }

      /* Filter Styles */
      .category-filters {
            display: flex;
            gap: 0.5rem;
            padding: 1rem;
            flex-wrap: wrap;
            justify-content: center;
        }

        .filter-btn {
            background: rgba(163, 201, 159, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .filter-btn.active {
            background: var(--success);
            border-color: var(--success);
        }
        
        .market-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .market-meta {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 1.5rem;
        }

        /* New Slider Styles */
        .slider-container {
            margin: 1.5rem 0;
        }

        .confidence-slider {
            -webkit-appearance: none;
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: rgba(255, 255, 255, 0.1);
            outline: none;
        }

        .confidence-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            cursor: pointer;
            border: 2px solid var(--primary);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        .slider-labels {
            display: flex;
            justify-content: space-between;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.7);
            margin-top: 0.5rem;
        }

        /* Choice Buttons */
        .choice-buttons {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1rem;
            margin-top: 1rem;
        }

        .choice-btn {
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            color: white;
        }

        .choice-btn.yes {
            border: 1px solid var(--success);
        }

        .choice-btn.no {
            border: 1px solid var(--danger);
        }

        .choice-btn:hover {
            transform: translateY(-2px);
            background: rgba(255, 255, 255, 0.2);
        }

        .verification {
            margin-top: 1.5rem;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .bet-input {
            width: 100%;
            padding-top: 0.8rem;
            padding-bottom: 0.8rem;
            margin: 0.5rem 0;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 1rem;
        }

                /* Toast notification styling */
        .toast {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent black background */
            color: white;
            padding: 20px 40px;
            border-radius: 10px;
            font-size: 18px;
            opacity: 0;
            visibility: hidden;
            z-index: 1000;
            transition: opacity 0.5s, visibility 0.5s;
            backdrop-filter: blur(10px); /* Apply blur effect to background */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5); /* Shadow for a 3D effect */
        }

        /* To make the toast visible */
        .toast.show {
            opacity: 1;
            visibility: visible;
        }


        .connect-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 0.7rem 1.5rem;
            border-radius: 30px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .connect-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .histogramBox {
            background: white;
            border: 1px solid #ddd;
            border-radius: 6px;
        }
    </style>
<body>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-array"></script> 

    <nav class="navbar">
        <div class="logo">
            <i class="fas fa-seedling"></i>
            <a href="/">Ambitus</a>
        </div>
        <div class="nav-links">
            <a href="#">Markets</a>
            <a href="/">News</a>
            <a href="/dashboard">Portfolio</a>
            <a href="/shop">Shop</a>
        </div>
        <div class="user-actions">
            <button class="connect-btn">
                <i class="fas fa-wallet"></i> Connect Wallet
            </button>
        </div>
        <% if (user) { %>
            <span class="username">Welcome, <%= user %></span>
            <a href="/logout" class="connect-btn">Sign Out</a>
        <% } else { %>
            <a href="/login?redirect=/blind" class="connect-btn">Sign In</a>
        <% } %>
    </nav>

    <div class="category-filters">
        <button class="filter-btn active" data-category="all">All</button>
        <button class="filter-btn" data-category="agreements">Agreements</button>
        <button class="filter-btn" data-category="policy">Policy</button>
        <button class="filter-btn" data-category="corporate">Corporate</button>
        <button class="filter-btn" data-category="environment">Environment</button>
        <button class="filter-btn" data-category="technology">Tech</button>
        <button class="filter-btn" data-category="financial">Financial</button>
    </div>

    <script>
        async function placeBet(key){
            let numContracts = document.getElementById('numcontracts' + key).value
            let guessValue = document.getElementById('estimate' + key).value

            let requestData = {betId: key, numContracts, guessValue}

            // Make the fetch request
            const response = await fetch('/blind/addContract', {
                method: 'POST',            // HTTP method
                headers: {
                    'Content-Type': 'application/json'  // Tell the server we're sending JSON data
                },
                body: JSON.stringify(requestData)    // Convert the object to JSON string
            });

            // Wait for the response to be parsed as JSON
            const data = await response.json();

            if (data.success) {
                toast('Submitted bid successfully!');
            } else {
                toast('Bid failed due to reason: ' + data.reason);
            }
        }

        // Function to show the toast
        function toast(text) {
            const toast = document.getElementById('toast');
            
            toast.innerHTML = text

            // Add 'show' class to make the toast visible
            toast.classList.add('show');

            // Automatically hide the toast after 3 seconds
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000); // Toast disappears after 3 seconds
        }

        // Function to implement Scott's Rule manually
        function scottsRule(data) {
            // Step 1: Calculate the standard deviation
            const mean = d3.mean(data);
            const variance = d3.mean(data, d => Math.pow(d - mean, 2));
            const stdDev = Math.sqrt(variance); // Standard deviation

            // Step 2: Calculate the range of the data (max - min)
            const range = d3.max(data) - d3.min(data);

            // Step 3: Calculate the bin width using Scott's Rule formula
            const binWidth = (3.5 * stdDev) / Math.pow(data.length, 1 / 3);

            // Step 4: Calculate the number of bins
            const binCount = Math.ceil(range / binWidth);

            return binCount;
        }

        async function loadChart(key){
            let id = `histogramChart${key}`
            const response = await fetch(`/blind/getdata?betId=${key}`);
            const data = (await response.json());

            // Convert to expanded dataset (repeat values by frequency)
            const rawData = data.flatMap(({ value, frequency }) =>
                Array(frequency).fill(value)
            );

            // Use D3 to automatically bin data
            // Calculate the number of bins using Scott's Rule
            const binCount = Math.max(10, scottsRule(rawData)); // Ensures at least 10 bins

            console.log('scottsRule(rawData)', scottsRule(rawData))
            console.log('binCount', binCount)

            const binGenerator = d3.bin()
                .domain([Math.min(...rawData), Math.max(...rawData)]) // Auto-detect min/max
                .thresholds(binCount)  // Scott's Rule
                .value(d => d);
            const bins = binGenerator(rawData);

            // Extract labels (bin ranges) and frequencies
            const labels = bins.map(bin => `${bin.x0}-${bin.x1}`);
            const frequencies = bins.map(bin => bin.length);

            // Draw histogram with Chart.js
            const ctx = document.getElementById(id).getContext('2d');

            new Chart(ctx, {
                type: 'bar',
                data: {
                labels: labels,
                datasets: [{
                    label: 'Frequency',
                    data: frequencies,
                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
                },
                options: {
                scales: {
                    x: { title: { display: true, text: 'Value Range' } },
                    y: { title: { display: true, text: 'Frequency' }, beginAtZero: true }
                }
                }
            });
        }
    </script>

    <!-- Toast container (hidden by default) -->
    <div id="toast" class="toast">
    
    </div>

    <div class="container">
        <% for (let key in cards) { %> 
            <!-- Loop through the dictionary keys
             
           /* 
            * title,
            * tag,
            * resolveDate,
            * verifierSource,
            * seedPrice,
            * range,
            * contracts: []
            */

            -->
            <!-- Card 1 -->
            <div class="market-card" data-category="<%= cards[key].tag %>">
                <h2 class="market-title"><%= cards[key].title %></h2>
                <div class="market-meta">
                    <span class="market-type"><%= cards[key].tagTitle %></span>
                    <span><i class="far fa-clock"></i> <%= cards[key].humanReadableEndDate %></span>
                </div>
                <div class="histogramBox" style="display: none;">
                    <canvas id="histogramChart<%=key%>"></canvas>
                    <script>
                        loadChart('<%=key%>')
                    </script>
                </div>
                <div class="slider-container">
                    <input type="range" class="confidence-slider" min="<%= cards[key].range[0] %>" max="<%= cards[key].range[1] %>" value="50"
                    oninput="document.getElementById('estimate<%=key%>').value = this.value">
                    <div class="slider-labels">
                        <span><%= cards[key].range[0] %></span>
                        <span><%= cards[key].range[1] %></span>
                    </div>
                </div>
                <label for="numcontracts">Estimate: </label>
                <input type="number" class="bet-input" placeholder="Your Estimate" id="estimate<%=key%>">
                <br>
                <label for="numcontracts">Num Contracts: </label>
                <input type="number" class="bet-input" placeholder="Number of Contracts" id="numcontracts<%=key%>">
                <div class="choice-buttons">
                    <button class="choice-btn yes" onclick="placeBet('<%=key%>')">Place Bet</button>
                </div>
                <div class="verification">
                    Source: <%= cards[key].verifierSource %>
                </div>
            </div>
        <% }; %>
        
    <script>
        // Slider interaction
        document.querySelectorAll('.choice-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const card = this.closest('.market-card');
                const sliderValue = card.querySelector('.confidence-slider').value;
                console.log(`Selected ${this.classList.contains('yes') ? 'YES' : 'NO'} with ${sliderValue}% confidence`);
            });
        });

        // Existing filter and other JS functionality remain unchanged
    </script>
</body>
</html>